;;;; Minesweeper solver

(define (add1 n)
  (+ n 1))
(define (sub1 n)
  (- n 1))
(define (atom? x)
  (and (not (pair? x)) (not (null? x))))
(define (lat? l)
  (cond ((null? l) #t)
        ((atom? (car l)) (lat? (cdr l)))
        (else #f)))
(define (member? a lat)
  (cond ((null? lat) #f)
        ((equal? a (car lat)) #t)
        (else (member? a (cdr lat)))))

(define NUMROWS 15)
(define NUMCOLS NUMROWS)
(define CELL-WIDTH 20)
(define CELL-HEIGHT CELL-WIDTH)
(define BOARD-WIDTH (* NUMCOLS CELL-WIDTH))
(define BOARD-HEIGHT (* NUMROWS CELL-HEIGHT))
(define device (make-graphics-device 'x))

(define (draw-rectangle x1 y1 x2 y2)
  (begin (graphics-draw-line device x1 y1 x2 y1)
				 (graphics-draw-line device x2 y1 x2 y2)
         (graphics-draw-line device x2 y2 x1 y2)
         (graphics-draw-line device x1 y2 x1 y1)))

(define (render-cell p c)
  (define x (* CELL-WIDTH (remainder p NUMCOLS)))
  (define y (* CELL-HEIGHT (quotient p NUMROWS)))
  (begin (sleep-current-thread 1)
         (draw-rectangle x y (+ x CELL-WIDTH) (+ y CELL-HEIGHT))
         (graphics-draw-text device x y (number->string c))))

(define (render)
  (begin (graphics-operation device 'set-internal-border-width 20)
         (graphics-set-coordinate-limits
           device 0 0 BOARD-WIDTH BOARD-HEIGHT)
         (do ((i 0 (add1 i))
              (j 0 (add1 j)))
           ((= i (* NUMROWS NUMCOLS)))
           (render-cell i j))))
